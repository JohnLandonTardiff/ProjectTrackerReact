{"ast":null,"code":"import { projectsList, writeProjects } from \"../../ProjectsPage/ProjectClass\";\nimport { SavedColor, writeColors } from \"../SavedColorComponent/SavedColorClass\";\nvar reloadCount = 0;\nexport function addColor(colorList, color, isProject, projectId, pageReload) {\n  const colorName = document.getElementById(\"color-name-input\").value;\n  if (colorList.find(color => color.name === colorName)) {\n    alert(\"There is already a color with this name\");\n    return;\n  }\n  const newColor = color ? color : \"#000000\";\n  colorList.push(new SavedColor(colorName, colorList.length, newColor));\n  if (isProject) {\n    writeColors(colorList);\n  } else {\n    projectsList[projectId].goalColors = colorList;\n    writeProjects();\n  }\n  pageReload(count + 1);\n}\nexport function deleteColor(colorList, id, isProject, projectId) {\n  colorList.splice(id, 1);\n  if (isProject) {\n    writeColors(colorList);\n    reloadProjects();\n  } else {\n    projectsList[projectId].goalColors = colorList;\n    writeProjects();\n    reloadGoals();\n  }\n}\nexport function saveColor(colorList, colorObject, color, isProject, projectId) {\n  colorObject.color = color;\n  colorObject.name = document.getElementById(\"color-name-input\").value;\n  if (isProject) {\n    writeColors(colorList);\n    reloadProjects();\n  } else {\n    projectsList[projectId].goalColors = colorList;\n    writeProjects();\n    reloadGoals();\n  }\n}\nfunction reloadProjects() {\n  console.log(\"reloadProjects\");\n  const event = new CustomEvent(\"reloadProjects\");\n  document.dispatchEvent(event);\n}\nfunction reloadGoals() {\n  console.log(\"reloadGoals\");\n  const event = new CustomEvent(\"reloadGoals\");\n  document.dispatchEvent(event);\n}","map":{"version":3,"names":["projectsList","writeProjects","SavedColor","writeColors","reloadCount","addColor","colorList","color","isProject","projectId","pageReload","colorName","document","getElementById","value","find","name","alert","newColor","push","length","goalColors","count","deleteColor","id","splice","reloadProjects","reloadGoals","saveColor","colorObject","console","log","event","CustomEvent","dispatchEvent"],"sources":["C:/Users/AMStudent/Desktop/ProjectTrackerRedux/project-tracker-redux/src/ColorPickerComponent/SavedColorComponent/SavedColorsScripting.js"],"sourcesContent":["import { projectsList, writeProjects } from \"../../ProjectsPage/ProjectClass\";\r\nimport { SavedColor, writeColors } from \"../SavedColorComponent/SavedColorClass\";\r\n\r\nvar reloadCount = 0;\r\n\r\nexport function addColor(colorList, color, isProject, projectId, pageReload){\r\n    const colorName = document.getElementById(\"color-name-input\").value;\r\n    if(colorList.find(color => color.name === colorName)){\r\n        alert(\"There is already a color with this name\");\r\n        return;\r\n    }\r\n    const newColor = color ? color : \"#000000\";\r\n    colorList.push(new SavedColor(colorName, colorList.length, newColor));\r\n\r\n    if(isProject) {\r\n        writeColors(colorList);\r\n    }\r\n    else{\r\n        projectsList[projectId].goalColors = colorList;\r\n        writeProjects();\r\n    }\r\n\r\n    pageReload(count + 1);\r\n}\r\n\r\nexport function deleteColor(colorList, id, isProject, projectId) {\r\n    colorList.splice(id, 1);\r\n    \r\n    if(isProject) {\r\n        writeColors(colorList);\r\n        reloadProjects();\r\n    }\r\n    else{\r\n        projectsList[projectId].goalColors = colorList;\r\n        writeProjects();\r\n        reloadGoals();\r\n    }\r\n}\r\n\r\nexport function saveColor(colorList, colorObject, color, isProject, projectId) {\r\n    colorObject.color = color;\r\n    colorObject.name = document.getElementById(\"color-name-input\").value;\r\n\r\n    if(isProject) {\r\n        writeColors(colorList);\r\n        reloadProjects();\r\n    }\r\n    else{\r\n        projectsList[projectId].goalColors = colorList;\r\n        writeProjects();\r\n        reloadGoals();\r\n    }\r\n}\r\n\r\nfunction reloadProjects(){\r\n    console.log(\"reloadProjects\");\r\n    const event = new CustomEvent(\"reloadProjects\");\r\n    document.dispatchEvent(event);\r\n}\r\n\r\nfunction reloadGoals(){\r\n    console.log(\"reloadGoals\");\r\n    const event = new CustomEvent(\"reloadGoals\");\r\n    document.dispatchEvent(event);\r\n}"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,iCAAiC;AAC7E,SAASC,UAAU,EAAEC,WAAW,QAAQ,wCAAwC;AAEhF,IAAIC,WAAW,GAAG,CAAC;AAEnB,OAAO,SAASC,QAAQ,CAACC,SAAS,EAAEC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAEC,UAAU,EAAC;EACxE,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC,CAACC,KAAK;EACnE,IAAGR,SAAS,CAACS,IAAI,CAACR,KAAK,IAAIA,KAAK,CAACS,IAAI,KAAKL,SAAS,CAAC,EAAC;IACjDM,KAAK,CAAC,yCAAyC,CAAC;IAChD;EACJ;EACA,MAAMC,QAAQ,GAAGX,KAAK,GAAGA,KAAK,GAAG,SAAS;EAC1CD,SAAS,CAACa,IAAI,CAAC,IAAIjB,UAAU,CAACS,SAAS,EAAEL,SAAS,CAACc,MAAM,EAAEF,QAAQ,CAAC,CAAC;EAErE,IAAGV,SAAS,EAAE;IACVL,WAAW,CAACG,SAAS,CAAC;EAC1B,CAAC,MACG;IACAN,YAAY,CAACS,SAAS,CAAC,CAACY,UAAU,GAAGf,SAAS;IAC9CL,aAAa,EAAE;EACnB;EAEAS,UAAU,CAACY,KAAK,GAAG,CAAC,CAAC;AACzB;AAEA,OAAO,SAASC,WAAW,CAACjB,SAAS,EAAEkB,EAAE,EAAEhB,SAAS,EAAEC,SAAS,EAAE;EAC7DH,SAAS,CAACmB,MAAM,CAACD,EAAE,EAAE,CAAC,CAAC;EAEvB,IAAGhB,SAAS,EAAE;IACVL,WAAW,CAACG,SAAS,CAAC;IACtBoB,cAAc,EAAE;EACpB,CAAC,MACG;IACA1B,YAAY,CAACS,SAAS,CAAC,CAACY,UAAU,GAAGf,SAAS;IAC9CL,aAAa,EAAE;IACf0B,WAAW,EAAE;EACjB;AACJ;AAEA,OAAO,SAASC,SAAS,CAACtB,SAAS,EAAEuB,WAAW,EAAEtB,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAE;EAC3EoB,WAAW,CAACtB,KAAK,GAAGA,KAAK;EACzBsB,WAAW,CAACb,IAAI,GAAGJ,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC,CAACC,KAAK;EAEpE,IAAGN,SAAS,EAAE;IACVL,WAAW,CAACG,SAAS,CAAC;IACtBoB,cAAc,EAAE;EACpB,CAAC,MACG;IACA1B,YAAY,CAACS,SAAS,CAAC,CAACY,UAAU,GAAGf,SAAS;IAC9CL,aAAa,EAAE;IACf0B,WAAW,EAAE;EACjB;AACJ;AAEA,SAASD,cAAc,GAAE;EACrBI,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC7B,MAAMC,KAAK,GAAG,IAAIC,WAAW,CAAC,gBAAgB,CAAC;EAC/CrB,QAAQ,CAACsB,aAAa,CAACF,KAAK,CAAC;AACjC;AAEA,SAASL,WAAW,GAAE;EAClBG,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC1B,MAAMC,KAAK,GAAG,IAAIC,WAAW,CAAC,aAAa,CAAC;EAC5CrB,QAAQ,CAACsB,aAAa,CAACF,KAAK,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}